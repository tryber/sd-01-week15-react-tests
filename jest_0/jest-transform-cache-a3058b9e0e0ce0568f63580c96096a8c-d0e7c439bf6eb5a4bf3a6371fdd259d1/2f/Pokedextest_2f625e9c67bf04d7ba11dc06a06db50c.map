{"version":3,"sources":["Pokedex.test.js"],"names":["afterEach","cleanup","pokemons","id","name","type","averageWeight","value","measurementUnit","image","moreInfo","foundAt","location","map","summary","isPokemonFavoriteById","test","queryAllByText","pokemon","expect","length","toBe","getByText","btnNextPokemon","toBeInTheDocument","i","fireEvent","click","getAllByText","listaPokemon","Set","tiposPokemons","buttonAll","auxiliar","nextSibling","textContent","buttonType","previousSibling"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { MemoryRouter } from 'react-router-dom';\nimport { render, fireEvent, cleanup } from '@testing-library/react';\nimport App from '../App';\nimport { Pokedex } from '../components';\n\nafterEach(cleanup);\n\nconst pokemons = [\n  {\n    id: 1,\n    name: 'Pikachu',\n    type: 'Electric',\n    averageWeight: {\n      value: '6.0',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/b/b2/Spr_5b_025_m.png',\n    moreInfo: 'https://bulbapedia.bulbagarden.net/wiki/Pikachu_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Kanto Viridian Forest',\n        map: 'https://cdn.bulbagarden.net/upload/0/08/Kanto_Route_2_Map.png',\n      },\n      {\n        location: 'Kanto Power Plant',\n        map:\n          'https://cdn.bulbagarden.net/upload/b/bd/Kanto_Celadon_City_Map.png',\n      },\n    ],\n    summary:\n      'This intelligent Pokémon roasts hard berries with electricity to make them tender enough to eat.',\n  },\n  {\n    id: 2,\n    name: 'Charmander',\n    type: 'Fire',\n    averageWeight: {\n      value: '8.5',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/0/0a/Spr_5b_004.png',\n    moreInfo:\n      'https://bulbapedia.bulbagarden.net/wiki/Charmander_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Alola Route 3',\n        map: 'https://cdn.bulbagarden.net/upload/9/93/Alola_Route_3_Map.png',\n      },\n      {\n        location: 'Kanto Route 3',\n        map: 'https://cdn.bulbagarden.net/upload/4/4a/Kanto_Route_3_Map.png',\n      },\n      {\n        location: 'Kanto Route 4',\n        map: 'https://cdn.bulbagarden.net/upload/2/24/Kanto_Route_4_Map.png',\n      },\n      {\n        location: 'Kanto Rock Tunnel',\n        map:\n          'https://cdn.bulbagarden.net/upload/6/6f/Kanto_Rock_Tunnel_Map.png',\n      },\n    ],\n    summary:\n      'The flame on its tail shows the strength of its life force. If it is weak, the flame also burns weakly.',\n  },\n  {\n    id: 3,\n    name: 'Caterpie',\n    type: 'Bug',\n    averageWeight: {\n      value: '2.9',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/8/83/Spr_5b_010.png',\n    moreInfo: 'https://bulbapedia.bulbagarden.net/wiki/Caterpie_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Johto Route 30',\n        map: 'https://cdn.bulbagarden.net/upload/7/76/Johto_Route_30_Map.png',\n      },\n      {\n        location: 'Johto Route 31',\n        map: 'https://cdn.bulbagarden.net/upload/2/2b/Johto_Route_31_Map.png',\n      },\n      {\n        location: 'Ilex Forest',\n        map:\n          'https://cdn.bulbagarden.net/upload/a/ae/Johto_Ilex_Forest_Map.png',\n      },\n      {\n        location: 'Johto National Park',\n        map:\n          'https://cdn.bulbagarden.net/upload/4/4e/Johto_National_Park_Map.png',\n      },\n    ],\n    summary:\n      'For protection, it releases a horrible stench from the antennae on its head to drive away enemies.',\n  },\n  {\n    id: 4,\n    name: 'Ekans',\n    type: 'Poison',\n    averageWeight: {\n      value: '6.9',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/1/18/Spr_5b_023.png',\n    moreInfo: 'https://bulbapedia.bulbagarden.net/wiki/Ekans_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Goldenrod Game Corner',\n        map:\n          'https://cdn.bulbagarden.net/upload/e/ec/Johto_Goldenrod_City_Map.png',\n      },\n    ],\n    summary:\n      'It can freely detach its jaw to swallow large prey whole. It can become too heavy to move, however.',\n  },\n];\n\nconst isPokemonFavoriteById = {\n  1: true,\n  2: false,\n  3: false,\n  4: false,\n};\n\ntest('2 - A Pokédex deve exibir apenas um pokémon por vez', () => {\n  const { queryAllByText } = render(\n    <MemoryRouter initialEntries={['/']}>\n      <App />\n    </MemoryRouter>,\n  );\n  const pokemon = queryAllByText(/Average weight:/i);\n\n  expect(pokemon.length).toBe(1);\n});\ntest('3 - Ao apertar o botão de próximo, a página deve exibir o próximo pokémon da lista.', () => {\n  const { getByText } = render(\n    <MemoryRouter initialEntries={['/']}>\n      <Pokedex\n        pokemons={pokemons}\n        isPokemonFavoriteById={isPokemonFavoriteById}\n      />\n    </MemoryRouter>,\n  );\n  const btnNextPokemon = getByText(/Próximo pokémon/i);\n  expect(btnNextPokemon).toBeInTheDocument();\n\n  for (let i = 0; i < pokemons.length; i += 1) {\n    expect(getByText(pokemons[i].name)).toBeInTheDocument();\n    fireEvent.click(btnNextPokemon);\n  }\n  expect(getByText(pokemons[0].name)).toBeInTheDocument();\n});\ntest(' 4 - A Pokédex deve conter botões de filtro', () => {\n  const { queryAllByText, getByText, getAllByText } = render(\n    <MemoryRouter initialEntries={['/']}>\n      <Pokedex\n        pokemons={pokemons}\n        isPokemonFavoriteById={isPokemonFavoriteById}\n      />\n    </MemoryRouter>,\n  );\n\n  const listaPokemon = [\n    ...new Set(pokemons.map((tiposPokemons) => tiposPokemons.type)),\n  ];\n  const buttonAll = getByText(/All/i);\n  let auxiliar = buttonAll;\n  for (let i = 0; i < listaPokemon.length; i += 1) {\n    expect(auxiliar.nextSibling.textContent).toBe(listaPokemon[i]);\n    auxiliar = auxiliar.nextSibling;\n    const buttonType = getAllByText(listaPokemon[i])[1] || getByText(listaPokemon[i]);\n    fireEvent.click(buttonType);\n    expect(queryAllByText(listaPokemon[i]).length).toBe(2);\n    fireEvent.click(getByText(/Próximo pokémon/i));\n    expect(getByText(/Average weight:/i).previousSibling.textContent).toBe(\n      listaPokemon[i],\n    );\n  }\n});\n"]}