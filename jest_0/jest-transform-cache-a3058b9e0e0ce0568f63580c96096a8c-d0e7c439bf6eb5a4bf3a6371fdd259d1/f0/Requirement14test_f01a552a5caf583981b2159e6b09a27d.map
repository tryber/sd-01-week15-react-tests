{"version":3,"sources":["Requirement-14.test.js"],"names":["afterEach","cleanup","pokemons","id","name","type","averageWeight","value","measurementUnit","image","moreInfo","foundAt","location","map","summary","isPokemonFavoriteById","func","jest","fn","testPossiblePoker","poker","pokerId","pokemon","match","params","getByText","queryAllByAltText","gameLocation","expect","textContent","toStrictEqual","tagName","toBe","nextSibling","childNodes","length","forEach","i","toBeInTheDocument","altForImage","imgAlt","src","alt","describe","select","test"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { MemoryRouter } from 'react-router-dom';\nimport { render, cleanup } from '@testing-library/react';\nimport { PokemonDetails } from '../components';\n\nafterEach(cleanup);\n\nconst pokemons = [\n  {\n    id: 1,\n    name: 'Pikachu',\n    type: 'Electric',\n    averageWeight: {\n      value: '6.0',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/b/b2/Spr_5b_025_m.png',\n    moreInfo: 'https://bulbapedia.bulbagarden.net/wiki/Pikachu_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Kanto Viridian Forest',\n        map: 'https://cdn.bulbagarden.net/upload/0/08/Kanto_Route_2_Map.png',\n      },\n      {\n        location: 'Kanto Power Plant',\n        map: 'https://cdn.bulbagarden.net/upload/b/bd/Kanto_Celadon_City_Map.png',\n      },\n    ],\n    summary:\n      'This intelligent Pokémon roasts hard berries with electricity to make them tender enough to eat.',\n  },\n  {\n    id: 2,\n    name: 'Charmander',\n    type: 'Fire',\n    averageWeight: {\n      value: '8.5',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/0/0a/Spr_5b_004.png',\n    moreInfo: 'https://bulbapedia.bulbagarden.net/wiki/Charmander_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Alola Route 3',\n        map: 'https://cdn.bulbagarden.net/upload/9/93/Alola_Route_3_Map.png',\n      },\n      {\n        location: 'Kanto Route 3',\n        map: 'https://cdn.bulbagarden.net/upload/4/4a/Kanto_Route_3_Map.png',\n      },\n      {\n        location: 'Kanto Route 4',\n        map: 'https://cdn.bulbagarden.net/upload/2/24/Kanto_Route_4_Map.png',\n      },\n      {\n        location: 'Kanto Rock Tunnel',\n        map: 'https://cdn.bulbagarden.net/upload/6/6f/Kanto_Rock_Tunnel_Map.png',\n      },\n    ],\n    summary:\n      'The flame on its tail shows the strength of its life force. If it is weak, the flame also burns weakly.',\n  },\n  {\n    id: 3,\n    name: 'Caterpie',\n    type: 'Bug',\n    averageWeight: {\n      value: '2.9',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/8/83/Spr_5b_010.png',\n    moreInfo: 'https://bulbapedia.bulbagarden.net/wiki/Caterpie_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Johto Route 30',\n        map: 'https://cdn.bulbagarden.net/upload/7/76/Johto_Route_30_Map.png',\n      },\n      {\n        location: 'Johto Route 31',\n        map: 'https://cdn.bulbagarden.net/upload/2/2b/Johto_Route_31_Map.png',\n      },\n      {\n        location: 'Ilex Forest',\n        map: 'https://cdn.bulbagarden.net/upload/a/ae/Johto_Ilex_Forest_Map.png',\n      },\n      {\n        location: 'Johto National Park',\n        map: 'https://cdn.bulbagarden.net/upload/4/4e/Johto_National_Park_Map.png',\n      },\n    ],\n    summary:\n      'For protection, it releases a horrible stench from the antennae on its head to drive away enemies.',\n  },\n  {\n    id: 4,\n    name: 'Ekans',\n    type: 'Poison',\n    averageWeight: {\n      value: '6.9',\n      measurementUnit: 'kg',\n    },\n    image: 'https://cdn.bulbagarden.net/upload/1/18/Spr_5b_023.png',\n    moreInfo: 'https://bulbapedia.bulbagarden.net/wiki/Ekans_(Pok%C3%A9mon)',\n    foundAt: [\n      {\n        location: 'Goldenrod Game Corner',\n        map: 'https://cdn.bulbagarden.net/upload/e/ec/Johto_Goldenrod_City_Map.png',\n      },\n    ],\n    summary:\n      'It can freely detach its jaw to swallow large prey whole. It can become too heavy to move, however.',\n  },\n];\nconst isPokemonFavoriteById = {\n  1: true,\n  2: false,\n  3: false,\n  4: false,\n};\n\nconst func = jest.fn();\n\nconst testPossiblePoker = (poker, pokerId, pokemon) => {\n  const match = {\n    params: {\n      id: `${pokemon.id}`,\n    },\n  };\n  const { getByText, queryAllByAltText } = render(\n    <MemoryRouter initialEntries={['/']}>\n      <PokemonDetails\n        pokemons={poker}\n        onUpdateFavoritePokemons={func}\n        isPokemonFavoriteById={pokerId}\n        match={match}\n      />\n    </MemoryRouter>,\n  );\n  const gameLocation = getByText(/Game Locations/i);\n  expect(gameLocation.textContent).toStrictEqual(`Game Locations of ${pokemon.name}`);\n  expect(gameLocation.tagName).toBe('H2');\n  expect(gameLocation.nextSibling.childNodes.length).toBe(pokemon.foundAt.length);\n  pokemon.foundAt.forEach((location, i) => {\n    expect(getByText(location.location)).toBeInTheDocument();\n    const altForImage = `${pokemon.name} location`;\n    const imgAlt = queryAllByAltText(altForImage);\n    expect(imgAlt[i].src).toBe(location.map);\n    expect(imgAlt[i].alt).toBe(altForImage);\n  });\n};\n\ndescribe('Exigência → 14', () => {\n  pokemons.forEach((select) => test(`A página de detalhes deve exibir uma secção\n  com os mapas com as localizações do pokémon`, () => {\n    testPossiblePoker(pokemons, isPokemonFavoriteById, select);\n  }));\n});\n"]}